
resource "aws_instance" "there" {
    ami                             = "${data.aws_ami.amazon_linux_2.id}"
    instance_type                   = "t2.micro"
    source_dest_check               = false
    vpc_security_group_ids          = ["${aws_security_group.there_sg.id}"]
    subnet_id                       = local.transit_private_subnet_id
    key_name                        = aws_key_pair.ssh_key.key_name

    tags = {
        Name = "${var.component_name}-tunnel-start"
    }
}

resource "aws_security_group" "there_sg" {
    vpc_id    = local.transit_vpc_id
    name      = "${var.component_name}-tunnel-sg"

    ingress {
        protocol    = "tcp"
        from_port   = 22
        to_port     = 22
        cidr_blocks = concat(split(",", "${data.aws_ssm_parameter.inbound_ips.value}"),
          ["10.0.0.0/8", "${var.my_ip}/32"])
    }

    # For debugging
    ingress {
        protocol    = "icmp"
        from_port   = -1
        to_port     = -1
        cidr_blocks = ["10.0.0.0/8"] # All local networks
    }

    egress {
        from_port = 0
        to_port   = 0
        protocol  = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }

    tags = {
        Name = "${var.component_name}-test-sg"
    }
}

resource "aws_instance" "here" {
    ami                             = "${data.aws_ami.amazon_linux_2.id}"
    instance_type                   = "t2.micro"
    source_dest_check               = false
    vpc_security_group_ids          = ["${aws_security_group.test_sg.id}"]
    associate_public_ip_address     = true # TODO: only when public
    subnet_id                       = local.subnet_id
    key_name                        = aws_key_pair.ssh_key.key_name

    tags = {
        Name = "${var.component_name}-tunnel-end"
    }
}

output "tunnel_end_ip" {
    value = aws_instance.here.public_ip
}
