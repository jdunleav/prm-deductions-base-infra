#!/bin/bash

set -Eeo pipefail

AWS_REGION=eu-west-2

function tf_plan {
  operation=$1

  terraform init
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    cd modules/whitelist_lambda/lambda
    zip -r ../lambda.zip .
    cd ../../..
    terraform plan -var-file=terraform.tfvars -out="nhs_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var-file=terraform.tfvars -out="nhs_deployment.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  terraform init
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json > tf-out.json
}

command="$1"
case "${command}" in
  tf)
      dojo "bash"
      ;;
  _tf_plan)
      tf_plan "$2"
      ;;
  tf_plan)
      dojo "./tasks _tf_plan $2"
      ;;
  _tf_apply)
      tf_apply
      ;;
  tf_apply)
      dojo "./tasks _tf_apply"
      ;;
  _tf_apply_whitelist)
      cd ip_whitelist
      terraform init
      terraform apply -auto-approve
      ;;
  tf_apply_whitelist)
      dojo "./tasks _tf_apply_whitelist"
      ;;
  _set_ip)
      my_ip=$(curl icanhazip.com)
      my_username="${DOJO_USER}"
      set +e
      aws ssm put-parameter \
       --region "${AWS_REGION}" \
       --name "/NHS/ip_whitelist/${my_username}/ipv4" \
       --type String \
       --overwrite \
       --value "${my_ip}"
      if [ $? != "0" ]; then
        echo "You need to authenticate with AWS first!"
        exit 5
      fi
      echo "Updated your IP to ${my_ip} at /NHS/ip_whitelist/${my_username}/ipv4"
      ;;
  set_ip) # To be used by developers when changing their IP
      dojo "./tasks _set_ip"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
